#!/bin/bash
[[ ! -x "$0" ]] && chmod +x "$0"

export LC_ALL=C

# A tailored workflow suite for offensive security.

function display_banner() {
    echo -e "\033[36m"  
    cat << "EOF"
       .   .-~\
      /'.'   `-:
      | /       `._
      || .-.      {
      |\ `-'       `.
   .  \|            /   We exploit flaws, not people.
 ~-.`.\\|        .-~_
    `.\-\     .-~   \
      `-'\~~.~      /
    .-~/|`-/~-.~--~
   /  |  \   ~-_\
EOF
    echo -e "\033[0m"  
    echo "Author        : 1337rokudenashi"
    echo "Version       : yublueflower v0.0.5 (latest)"
    echo "Tagline       : yublueflower â€” A tailored workflow suite for offensive security."
    echo "Time          : $(date '+%H:%M:%S %d-%m-%Y')"
    echo "Architecture  : $(lsb_release -ds) ($(uname -m))"
    echo "Uptime        : $(uptime -p | sed 's/up //')"
    echo ""
}

function install_dependencies() {
    echo -e "\033[36mðŸŸ¢ Preparing for needs...\033[0m"

    yublueflower_path="$HOME/.local/bin/yublueflower"
    bash_yublueflower_path=$(realpath "$0")

    if [[ "$bash_yublueflower_path" != "$yublueflower_path" ]]; then
        mkdir -p "$HOME/.local/bin"
        cp "$bash_yublueflower_path" "$yublueflower_path"
        chmod +x "$yublueflower_path"
    fi

    if ! grep -q "export PATH=\$HOME/.local/bin:\$PATH" ~/.profile; then
        echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.profile
    fi
    
    go_version=$(go version 2>/dev/null | awk '{print $3}' | sed 's/go//')
    required_go_version="1.24.4"

    if [[ -z "$go_version" ]] || [[ "$(printf '%s\n' "$go_version" "$required_go_version" | sort -V | tail -n1)" != "$go_version" ]]; then
        echo "Installing go.dev $required_go_version"

        wget -q https://go.dev/dl/go1.24.4.linux-amd64.tar.gz -O /tmp/go.tar.gz
        rm -rf $HOME/go 2>/dev/null  
        mkdir -p $HOME/go
        tar -C $HOME/go --strip-components=1 -xzf /tmp/go.tar.gz
        rm -f /tmp/go.tar.gz

        export GOROOT=$HOME/go
        export GOPATH=$HOME/godev  
        export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

        if ! grep -q "export GOROOT=$HOME/go" ~/.profile; then
            echo "export GOROOT=$HOME/go" >> ~/.profile
        fi
        if ! grep -q "export GOPATH=$HOME/godev" ~/.profile; then
            echo "export GOPATH=$HOME/godev" >> ~/.profile
        fi
        if ! grep -q "export PATH=\$GOROOT/bin:\$GOPATH/bin:\$PATH" ~/.profile; then
            echo "export PATH=\$GOROOT/bin:\$GOPATH/bin:\$PATH" >> ~/.profile
        fi
    fi

    mkdir -p "$GOPATH/bin" "$GOPATH/src" "$GOPATH/pkg"

    node_version=$(node -v 2>/dev/null | sed 's/v//')
    required_node_version="22.14.0"

    if [[ -z "$node_version" ]] || [[ "$(printf '%s\n' "$node_version" "$required_node_version" | sort -V | tail -n1)" != "$node_version" ]]; then
        echo "Installing node.js v$required_node_version"

        wget -q https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-x64.tar.xz -O /tmp/node.tar.xz
        rm -rf $HOME/node 2>/dev/null
        mkdir -p $HOME/node
        tar -C $HOME/node --strip-components=1 -xf /tmp/node.tar.xz
        rm -f /tmp/node.tar.xz

        export PATH=$HOME/node/bin:$PATH

        if ! grep -q "export PATH=\$HOME/node/bin:\$PATH" ~/.profile; then
            echo "export PATH=\$HOME/node/bin:\$PATH" >> ~/.profile
        fi
    fi

    go install -v github.com/projectdiscovery/urlfinder/cmd/urlfinder@latest
    go install github.com/projectdiscovery/katana/cmd/katana@latest
    go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
    go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
    go install github.com/charmbracelet/glow@latest
    
    clear
}

function display_help() {
    echo -e "\033[36mUsage:\033[0m"
    echo "yublueflower --url http://testphp.vulnweb.com"
    echo ""
    echo -e "\033[36mOptions:\033[0m"
    echo "--help                    Show help message."
    echo "--url string[]            Scan as well as test utilizing security flaw templates."
    echo "--non-intrusive-gather    Use --non-intrusive-gather sources to gather URLs (Wayback, AlienVault, Common Crawl)."
    echo "--silent                  Skip noisy URL logs."
    echo "--highly-aggressive-test  Use --highly-aggressive-test to uncover less obvious flaws."
    echo "--pipe-urls               Works great with piped input."
}

function write_log() {
    if [[ "$silent" == "--silent" ]]; then
        cat >> "$temp_file"
    else
        tee -a "$temp_file"
    fi
}

function bash_yublueflower() {
    display_banner

    local url=""
    local non_intrusive_gather=""
    local silent=""
    local highly_aggressive_test=""
    local pipe_urls=false

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --url)
                if [[ -n "$2" && "$2" != -* ]]; then
                    url="$2"
                    shift 2
                else
                    echo -e "\033[31m[!] Missing URL after --url. Use --help for usage instructions.\033[0m"
                    exit 1
                fi
                ;;
            --non-intrusive-gather)
                non_intrusive_gather="--non-intrusive-gather"
                shift;;
            --silent)
                silent="--silent"
                shift;;
            --highly-aggressive-test)
                highly_aggressive_test="--highly-aggressive-test"
                shift;;
            --pipe-urls)
                pipe_urls=true
                shift;;
            *)
                echo -e "\033[31m[!] Unrecognized argument: $1. Use --help for usage instructions.\033[0m"
                exit 1;;
        esac
    done

    if [[ "$pipe_urls" == true ]]; then
        xargs -P1 -I{} bash -c 'yublueflower --url "$1" '"$non_intrusive_gather $highly_aggressive_test $silent"'' _ {}
        exit 0
    fi

    if [[ -z "$url" ]]; then
        echo -e "\033[31m[!] Missing required --url argument. Use --help for usage instructions.\033[0m"
        exit 1
    fi

    local report_dir="$HOME/glow_yublueflower"
    local output_file="yublueflower_$(date '+%Y%m%d_%H%M%S')"
    local output_path="$report_dir/$output_file"
    mkdir -p "$report_dir"
    local start_time=$(date "+%H:%M:%S %d-%m-%Y")
    echo "Testing started at $start_time"

    if ! [[ "$url" =~ ^https?:// ]]; then
        echo -e "\033[31m[!] Please include http:// or https://. Use --help for usage instructions.\033[0m"
        exit 1
    fi

    domain=$(echo "$url" | sed -E 's|https?://||' | cut -d'/' -f1)

    echo -e "\033[36mðŸŸ¢ Aggressively gather URLs...\033[0m"
    timestamp=$(date "+%Y%m%d%H%M%S")
    temp_file="/tmp/gathering_URLs_tmp_$timestamp.txt"
    yublueflower_URLs_tmp="/tmp/yublueflower_URLs_tmp_$timestamp.txt" ; yublueflower_URLs="/tmp/yublueflower_URLs_$timestamp.txt"
    > "$temp_file"
    if [[ "$silent" == "--silent" ]]; then
        echo "Aggressively gather URLs â€” silent."
    fi

    if [[ "$non_intrusive_gather" != "--non-intrusive-gather" ]]; then
        katana -u "$url" -match-regex ".*\?.*=.*" -silent | perl -pe 's/[^[:print:]\t\r\n]//g' | grep -E "^${url%/}(/|$)" | grep -Ev "\.(jpg|jpeg|png|gif|svg|ico|css|js|woff2?|ttf|eot|pdf|zip|tar|gz|rar|mp4|mp3|docx?|xlsx?|pptx?|exe|apk|json|xml|csv)(\?|$)" | grep -Ev '(\?|&)(utm_(source|medium|campaign|term|content)|fbclid|gclid|yclid|msclkid|ga(_cid|id)?|mc_(cid|eid)|_hs(enc|mi)?|ref(_src|_url|id)?|src|source(Name)?|from|via|tracking|track(id)?|click|ad(id|group(id)?)?|pixel|campaignid|theme|style|layout|format|viewtype|preview|width|height|nocache|noload|cache|ver(sion)?|ts|timestamp|_|cb|rnd|client|browser|device|screen|dpi|env|platform|debug|log|tab|offset|start(index)?|step|scroll|position|expand|collapse|open|closed|show)=' | awk -F'?' '!seen[$1]++ && $2 { split($2, a, "&"); split(a[1], b, "="); if (b[1] != "") print $1 "?" b[1] "=yublueflower" }' | grep -Ev 'https?://[^ ]+https?://' | grep -Ev '[?&][^=]*[^a-zA-Z0-9_.-][^=]*=' | httpx -silent | cut -d' ' -f1 | write_log
    else
        urlfinder -d "$domain" -silent | perl -pe 's/[^[:print:]\t\r\n]//g' | grep -E "^${url%/}(/|$)" | grep "\?.*=" | grep -Ev "\.(jpg|jpeg|png|gif|svg|ico|css|js|woff2?|ttf|eot|pdf|zip|tar|gz|rar|mp4|mp3|docx?|xlsx?|pptx?|exe|apk|json|xml|csv)(\?|$)" | grep -Ev '(\?|&)(utm_(source|medium|campaign|term|content)|fbclid|gclid|yclid|msclkid|ga(_cid|id)?|mc_(cid|eid)|_hs(enc|mi)?|ref(_src|_url|id)?|src|source(Name)?|from|via|tracking|track(id)?|click|ad(id|group(id)?)?|pixel|campaignid|theme|style|layout|format|viewtype|preview|width|height|nocache|noload|cache|ver(sion)?|ts|timestamp|_|cb|rnd|client|browser|device|screen|dpi|env|platform|debug|log|tab|offset|start(index)?|step|scroll|position|expand|collapse|open|closed|show)=' | awk -F'?' '!seen[$1]++ && $2 { split($2, a, "&"); split(a[1], b, "="); if (b[1] != "") print $1 "?" b[1] "=yublueflower" }' | grep -Ev 'https?://[^ ]+https?://' | grep -Ev '[?&][^=]*[^a-zA-Z0-9_.-][^=]*=' | httpx -silent | cut -d' ' -f1 | write_log
        katana -u "$url" -match-regex ".*\?.*=.*" -silent | perl -pe 's/[^[:print:]\t\r\n]//g' | grep -E "^${url%/}(/|$)" | grep -Ev "\.(jpg|jpeg|png|gif|svg|ico|css|js|woff2?|ttf|eot|pdf|zip|tar|gz|rar|mp4|mp3|docx?|xlsx?|pptx?|exe|apk|json|xml|csv)(\?|$)" | grep -Ev '(\?|&)(utm_(source|medium|campaign|term|content)|fbclid|gclid|yclid|msclkid|ga(_cid|id)?|mc_(cid|eid)|_hs(enc|mi)?|ref(_src|_url|id)?|src|source(Name)?|from|via|tracking|track(id)?|click|ad(id|group(id)?)?|pixel|campaignid|theme|style|layout|format|viewtype|preview|width|height|nocache|noload|cache|ver(sion)?|ts|timestamp|_|cb|rnd|client|browser|device|screen|dpi|env|platform|debug|log|tab|offset|start(index)?|step|scroll|position|expand|collapse|open|closed|show)=' | awk -F'?' '!seen[$1]++ && $2 { split($2, a, "&"); split(a[1], b, "="); if (b[1] != "") print $1 "?" b[1] "=yublueflower" }' | grep -Ev 'https?://[^ ]+https?://' | grep -Ev '[?&][^=]*[^a-zA-Z0-9_.-][^=]*=' | httpx -silent | cut -d' ' -f1 | write_log
    fi
    tee -a "$yublueflower_URLs_tmp" < "$temp_file" > /dev/null
    awk -F'[?]' '!seen[$1]++' "$yublueflower_URLs_tmp" | sort -u | tee "$yublueflower_URLs" > /dev/null
    tee "$yublueflower_URLs_tmp" < "$yublueflower_URLs" > /dev/null
    rm -rf "$temp_file" "$yublueflower_URLs_tmp"

    echo -e "\033[36mðŸŸ¢ Scan as well as test utilizing security flaw templates...\033[0m"
    if [[ "$highly_aggressive_test" != "--highly-aggressive-test" ]]; then
        nuclei -u "$url" -silent -markdown-export "$output_path"
        xargs -a "$yublueflower_URLs" -I {} -P 1 nuclei -u {} -dast -silent -markdown-export "$output_path"
        nuclei -u "$url" -tags cve -silent -markdown-export "$output_path"
    else
        nuclei -u "$url" -silent -markdown-export "$output_path"
        xargs -a "$yublueflower_URLs" -I {} -P 1 nuclei -u {} -dast -silent -markdown-export "$output_path"
        nuclei -u "$url" -tags cve -silent -markdown-export "$output_path"
        
        xargs -a "$yublueflower_URLs" -I {} -P 1 nuclei -u {} -fuzz-aggression high -severity low,medium,high,critical -silent -markdown-export "$output_path"
    fi

    echo -e "\033[36mðŸŸ¢ See what issues can be exploited...\033[0m"
    echo -e "We exploit flaws, not people. \033[36m$report_dir\033[0m â€” security issues await."

    [[ -f "$output_path/index.md" ]] && rm -f "$output_path/index.md"

    echo "Testing finished at $(date "+%H:%M:%S %d-%m-%Y")"
    echo -e "Use command \033[36mglow $output_file\033[0m to see what issues can be exploited."

    rm -rf "$yublueflower_URLs"
}

if [[ -z "$1" ]]; then install_dependencies; display_banner; display_help; exec bash -l; fi ; if [[ "$1" == "--help" ]]; then display_banner; display_help; exit 0; fi
bash_yublueflower "$@"
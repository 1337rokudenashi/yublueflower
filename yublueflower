#!/bin/bash

# A suite integrating open-source workflows tailored for offensive security.

function display_banner() {
    echo -e "\033[36m"  
    cat << "EOF"
            .      .-~\
           / `-'.'    `- :
           |    /          `._
           |   |   .-.        {
            \  |   `-'         `.
          .  \ |                /    We exploit flaws, not people.
        ~-.`.\ \|            .-~_
           `.\-.\       .-~      \
             `-'/~~ -.~          /
           .-~/|`-._ /~~-.~ -- ~
          /  |  \    ~- . _\
EOF
    echo -e "\033[0m"  
    echo "A suite integrating open-source workflows tailored for offensive security."
    echo "Author: 1337rokudenashi"
    echo "Current yublueflower version v0.0.3 (latest)"
    echo ""
}

function install_dependencies() {
    echo -e "\033[36m游릭 Preparing for needs...\033[0m"

    yublueflower_path="$HOME/.local/bin/yublueflower"
    bash_yublueflower_path=$(realpath "$0")

    if [[ "$bash_yublueflower_path" != "$yublueflower_path" ]]; then
        mkdir -p "$HOME/.local/bin"
        cp "$bash_yublueflower_path" "$yublueflower_path"
        chmod +x "$yublueflower_path"
    fi

    if ! grep -q "export PATH=\$HOME/.local/bin:\$PATH" ~/.profile; then
        echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.profile
    fi
    
    go_version=$(go version 2>/dev/null | awk '{print $3}' | sed 's/go//')
    required_go_version="1.23.0"

    if [[ -z "$go_version" ]] || [[ "$(printf '%s\n' "$go_version" "$required_go_version" | sort -V | tail -n1)" != "$go_version" ]]; then
        echo "Installing go.dev $required_go_version"

        wget -q https://go.dev/dl/go1.23.0.linux-amd64.tar.gz -O /tmp/go.tar.gz
        rm -rf $HOME/go 2>/dev/null  
        mkdir -p $HOME/go
        tar -C $HOME/go --strip-components=1 -xzf /tmp/go.tar.gz
        rm -f /tmp/go.tar.gz

        export GOROOT=$HOME/go
        export GOPATH=$HOME/godev  
        export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

        if ! grep -q "export GOROOT=$HOME/go" ~/.profile; then
            echo "export GOROOT=$HOME/go" >> ~/.profile
        fi
        if ! grep -q "export GOPATH=$HOME/godev" ~/.profile; then
            echo "export GOPATH=$HOME/godev" >> ~/.profile
        fi
        if ! grep -q "export PATH=\$GOROOT/bin:\$GOPATH/bin:\$PATH" ~/.profile; then
            echo "export PATH=\$GOROOT/bin:\$GOPATH/bin:\$PATH" >> ~/.profile
        fi
    fi

    mkdir -p "$GOPATH/bin" "$GOPATH/src" "$GOPATH/pkg"

    node_version=$(node -v 2>/dev/null | sed 's/v//')
    required_node_version="22.14.0"

    if [[ -z "$node_version" ]] || [[ "$(printf '%s\n' "$node_version" "$required_node_version" | sort -V | tail -n1)" != "$node_version" ]]; then
        echo "Installing node.js v$required_node_version"

        wget -q https://nodejs.org/dist/v22.14.0/node-v22.14.0-linux-x64.tar.xz -O /tmp/node.tar.xz
        rm -rf $HOME/node 2>/dev/null
        mkdir -p $HOME/node
        tar -C $HOME/node --strip-components=1 -xf /tmp/node.tar.xz
        rm -f /tmp/node.tar.xz

        export PATH=$HOME/node/bin:$PATH

        if ! grep -q "export PATH=\$HOME/node/bin:\$PATH" ~/.profile; then
            echo "export PATH=\$HOME/node/bin:\$PATH" >> ~/.profile
        fi
    fi

    go install -v github.com/projectdiscovery/urlfinder/cmd/urlfinder@latest
    go install github.com/projectdiscovery/katana/cmd/katana@latest
    go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
    go install github.com/charmbracelet/glow@latest
    
    clear
}

function display_help() {
    echo -e "\033[36mUsage:\033[0m"
    echo "yublueflower -url http://testphp.vulnweb.com/"
    echo ""
    echo -e "\033[36mOptions:\033[0m"
    echo "-help                 Show help message."
    echo "-url <URL>            Scan as well as test utilizing security flaw templates."
    echo "-highly-aggressive    Highly aggressive testing."
    echo "-silent               Skip URL gathering noise to keep testing clean."
}

function bash_yublueflower() {
    install_dependencies
    display_banner

    local url=""
    local highly_aggressive=""
    local silent=""

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -url)
                if [[ -n "$2" && "$2" != -* ]]; then
                    url="$2"
                    shift 2
                else
                    echo -e "\033[31m[!] Missing URL after -url. Use -help for usage instructions.\033[0m"
                    exit 1
                fi
                ;;
            -highly-aggressive)
                highly_aggressive="-highly-aggressive"
                shift;;
            -silent)
                silent="-silent"
                shift;;
            *)
                echo -e "\033[31m[!] Unrecognized argument: $1. Use -help for usage instructions.\033[0m"
                exit 1;;
        esac
    done

    if [[ -z "$url" ]]; then
        echo -e "\033[31m[!] Missing required -url argument. Use -help for usage instructions.\033[0m"
        exit 1
    fi

    local report_dir="$HOME/glow_yublueflower"
    local output_file="yublueflower_$(date '+%Y%m%d_%H%M%S')"
    local output_path="$report_dir/$output_file"
    mkdir -p "$report_dir"
    local start_time=$(date "+%H:%M:%S %d-%m-%Y")
    echo "Testing started at $start_time"

    if ! [[ "$url" =~ ^https?:// ]]; then
        echo -e "\033[31m[!] Please include http:// or https://. Use -help for usage instructions.\033[0m"
        exit 1
    fi

    domain=$(echo "$url" | sed -E 's|https?://||' | cut -d'/' -f1)

    echo -e "\033[36m游릭 Reconnaissance Phase: Aggressively gathering URLs...\033[0m"
    timestamp=$(date "+%Y%m%d%H%M%S")
    if [[ "$silent" != "-silent" ]]; then
        urlfinder -d "$domain" -silent | grep --text "\?.*=" | awk -F'[?]' '!seen[$1]++ {split($2, a, "&"); print $1 "?" a[1]}' | tee /tmp/passively_gathering_urls_$timestamp.txt
        katana -u "$url" -mr ".*\?.*" -silent | awk -F'[?]' '!seen[$1]++ {split($2, a, "&"); print $1 "?" a[1]}' | tee /tmp/actively_gathering_urls_$timestamp.txt
    else
        urlfinder -d "$domain" -silent | grep --text "\?.*=" | awk -F'[?]' '!seen[$1]++ {split($2, a, "&"); print $1 "?" a[1]}' > /tmp/passively_gathering_urls_$timestamp.txt
        katana -u "$url" -mr ".*\?.*" -silent | awk -F'[?]' '!seen[$1]++ {split($2, a, "&"); print $1 "?" a[1]}' > /tmp/actively_gathering_urls_$timestamp.txt
    fi

    echo -e "\033[36m游릭 Vulnerability Assessment Phase: Assessing vulnerabilities offensively, scanning as well as testing utilizing security flaw templates...\033[0m"
    if [[ "$highly_aggressive" != "-highly-aggressive" ]]; then
        nuclei -u "$url" -silent -markdown-export "$output_path"
        nuclei -list /tmp/passively_gathering_urls_$timestamp.txt -dast -silent -markdown-export "$output_path" ; nuclei -list /tmp/actively_gathering_urls_$timestamp.txt -dast -silent -markdown-export "$output_path"
        nuclei -u "$url" -tags cve -silent -markdown-export "$output_path"
    else
        nuclei -u "$url" -silent -markdown-export "$output_path"
        nuclei -list /tmp/passively_gathering_urls_$timestamp.txt -dast -silent -markdown-export "$output_path" ; nuclei -list /tmp/passively_gathering_urls_$timestamp.txt -fuzz-aggression high -severity low,medium,high,critical -silent -markdown-export "$output_path" ; nuclei -list /tmp/actively_gathering_urls_$timestamp.txt -dast -silent -markdown-export "$output_path" ; nuclei -list /tmp/actively_gathering_urls_$timestamp.txt -fuzz-aggression high -severity low,medium,high,critical -silent -markdown-export "$output_path"
        nuclei -u "$url" -tags cve -silent -markdown-export "$output_path"
    fi

    echo -e "\033[36m游릭 Reporting Phase: Results flawlessly generated...\033[0m"
    echo "Results at $report_dir"

    [[ -f "$output_path/index.md" ]] && rm -f "$output_path/index.md"

    echo "Testing finished at $(date "+%H:%M:%S %d-%m-%Y")"
    echo -e "Use command \033[36mglow $output_file\033[0m to see results."

    rm -f /tmp/passively_gathering_urls_$timestamp.txt /tmp/actively_gathering_urls_$timestamp.txt
}

if [[ -z "$1" ]]; then install_dependencies; display_banner; display_help; exec bash -l; fi ; if [[ "$1" == "-help" ]]; then display_banner; display_help; exit 0; fi
bash_yublueflower "$@"
